// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// model Example {
//   id        String   @id @default(cuid())
// createdAt DateTime @default(now())
// updatedAt DateTime @updatedAt
// }

enum Role {
  USER
  ADMIN
}

// Necessary for Next auth
model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  verified  Boolean  @default(false)
  image     String?
  role      Role     @default(USER)
  collegeId String?
  college   College? @relation(fields: [collegeId], references: [id])

  exercises Exercise[]
  bookmarks Bookmark[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model College {
  id   String @id @default(cuid())
  name String
  slug String @unique

  knowledgePoints KnowledgePoint[]
  users           User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model KnowledgePoint {
  id        String  @id @default(cuid())
  name      String
  college   College @relation(fields: [collegeId], references: [id])
  collegeId String

  exercises Exercise[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ExerciseType {
  CHOICE_QUESTION // 选择题
  COMPLETITION_QUESTION // 填空题
  BIG_QUESTION // 大题
}

enum DifficultyType {
  EASY // 简单
  MEDIUM // 中等
  HARD // 困难
}

model Exercise {
  id         String         @id @default(cuid())
  type       ExerciseType // 题目类型
  difficulty DifficultyType // 题目难度
  question   String         @db.Text // 题目
  answer     String         @db.Text // 解析
  point      Int            @default(0) // 分值
  label      String? // 标签

  knowledgePoint   KnowledgePoint @relation(fields: [knowledgePointId], references: [id])
  knowledgePointId String
  user             User           @relation(fields: [userId], references: [id])
  userId           String

  bookmarks Bookmark[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bookmark {
  id       String   @id @default(cuid())
  userId   String
  postId   String
  user     User     @relation(fields: [userId], references: [id])
  exercise Exercise @relation(fields: [postId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, postId])
}
