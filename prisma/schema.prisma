// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

// Necessary for Next auth
model User {
  id       String  @id @default(cuid())
  name     String
  email    String  @unique
  password String
  verified Boolean @default(false)
  image    String?
  role     Role    @default(USER)
  paper    Paper?

  bookmarks Bookmark[]
  exercises Exercise[]

  collegeId String?
  college   College? @relation(fields: [collegeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model College {
  id   String @id @default(cuid())
  name String
  slug String @unique

  users   User[]
  courses Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id   String @id @default(cuid())
  name String

  knowledgePoints KnowledgePoint[]

  collegeId String
  college   College @relation(fields: [collegeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model KnowledgePoint {
  id    String  @id @default(cuid())
  name  String
  label String? // 标签

  exercises Exercise[]

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ExerciseType {
  ALL_QUESTION // 所有
  CHOICE_QUESTION // 选择题
  COMPLETION_QUESTION // 填空题
  BIG_QUESTION // 大题
}

enum DifficultyType {
  ANY // 任意
  EASY // 简单
  MEDIUM // 中等
  HARD // 困难
}

model Option {
  id      String @id @default(cuid())
  content String

  exerciseId String?
  exercise   Exercise? @relation(fields: [exerciseId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Exercise {
  id         String         @id @default(cuid())
  type       ExerciseType // 题目类型
  difficulty DifficultyType // 题目难度
  question   String         @db.Text // 题目
  answer     String         @db.Text // 答案
  analysis   String?        @db.Text // 解析

  bookmarks       Bookmark[]
  options         Option[]
  knowledgePoints KnowledgePoint[]

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade) // 题目作者

  paperId String?
  paper   Paper?  @relation(fields: [paperId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bookmark {
  id String @id @default(cuid())

  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  exerciseId String
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, exerciseId])
}

model ExerciseRule {
  id String @id @default(cuid())

  type       ExerciseType // 规则的题目类型
  difficulty DifficultyType // 规则的难度类型
  amount     Int // 该规则下的题目有多少组

  paper   Paper?  @relation(fields: [paperId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  paperId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Paper {
  id String @id @default(cuid())

  exercises Exercise[] // 试题
  rules     ExerciseRule[] // 试题规则

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
